 import numpy as np
 import matplotlib
 matplotlib.use('agg')
 import pylab as plt
 from sklearn import manifold, datasets
 
 digits = datasets.load_digits(n_class=6)
 X, y = digits.data, digits.target
 n_samples, n_features = X.shape
 
 '''显示原始数据'''
 n = 20  # 每行20个数字，每列20个数字
 img = np.zeros((10 * n, 10 * n))
 for i in range(n):
     ix = 10 * i + 1
     for j in range(n):
         iy = 10 * j + 1
         img[ix:ix + 8, iy:iy + 8] = X[i * n + j].reshape((8, 8))
 fig1 = plt.figure(figsize=(8, 8))
 plt.imshow(img, cmap=plt.cm.binary)
 plt.xticks([])
 plt.yticks([])
 plt.show()
 fig1.savefig('1.png')
 '''t-SNE'''
 tsne = manifold.TSNE(n_components=2, init='pca', random_state=501)
 X_tsne = tsne.fit_transform(X)
 
 print("Org data dimension is {}.Embedded data dimension is {}".format(X.shape[-1], X_tsne.shape[-1]))
 
 '''嵌入空间可视化'''
 x_min, x_max = X_tsne.min(0), X_tsne.max(0)
 X_norm = (X_tsne - x_min) / (x_max - x_min)  # 归一化
 fig2 = plt.figure(figsize=(8, 8))
 for i in range(X_norm.shape[0]):
     plt.text(X_norm[i, 0], X_norm[i, 1], str(y[i]), color=plt.cm.Set1(y[i]),
                              fontdict={'weight': 'bold', 'size': 9})
 plt.xticks([])
 plt.yticks([])
 plt.show()
 fig2.savefig('2.png')
